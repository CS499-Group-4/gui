
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\cs499\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1455x1041")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 1041,
    width = 1455,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    1.0,
    235.0,
    1042.0,
    fill="#79BCF7",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=1.0,
    y=402.0,
    width=235.0,
    height=100.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=0.0,
    y=302.0,
    width=235.0,
    height=100.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_3 clicked"),
    relief="flat"
)
button_3.place(
    x=0.0,
    y=202.0,
    width=235.0,
    height=100.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_4 clicked"),
    relief="flat"
)
button_4.place(
    x=0.0,
    y=102.0,
    width=235.0,
    height=100.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_5 clicked"),
    relief="flat"
)
button_5.place(
    x=0.0,
    y=1.5,
    width=235.0,
    height=100.0
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    118.0,
    993.0,
    image=image_image_1
)

canvas.create_rectangle(
    332.0,
    52.0,
    1384.0,
    987.0,
    fill="#DAEBF9",
    outline="")

canvas.create_text(
    486.2366027832031,
    95.02468872070312,
    anchor="nw",
    text="Welcome to Course Scheduling System",
    fill="#094478",
    font=("Roboto Black", 40 * -1)
)

canvas.create_text(
    366.4584655761719,
    234.9700164794922,
    anchor="nw",
    text="                                                           System Description:         \nMake a compatible easy-to-use user interface within an application that allows \nthe automated scheduling of university courses by the dean of a given department from imported data.\n     User Instruction：\n1. Go to the `Input Data` module to enter course, faculty, and classroom details.\n2. Select `Generate Schedule` from the main dashboard to create the course schedule.\n3. View the generated schedule in `View Schedule` for a detailed overview.\n4. Use the `Conflict Resolution` module to address any detected issues.\n5. Generate reports in the `Reports` module for printing or sharing.\n6. Adjust system settings in the `Settings` module if needed.\n\nFor additional help, click the `Help` button in the navigation bar.\n\n\n\n\n\n\n",
    fill="#094478",
    font=("Roboto Regular", 24 * -1)
)
window.resizable(False, False)
window.mainloop()
